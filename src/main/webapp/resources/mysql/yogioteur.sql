USE SCOTT;
-- 테이블 초기화
DROP TABLE MEMBER_LOG;
DROP TABLE SIGN_OUT_MEMBER;
DROP TABLE MEMBER;

-- 관리자(나중에 1번으로 insert하기)/ 탈퇴막기

CREATE TABLE MEMBER_LOG (
    MEMBER_LOG_NO	BIGINT NOT NULL auto_increment PRIMARY KEY,        -- PK
	MEMBER_ID	    VARCHAR(32)	NOT NULL,	-- FK
	SIGN_UP     	DATE   -- 로그인 일시
);

CREATE TABLE SIGN_OUT_MEMBER (
	SIGN_OUT_NO	BIGINT  NOT NULL auto_increment PRIMARY KEY,           -- PK
	MEMBER_NO	BIGINT	NOT NULL,           
	ID	        VARCHAR(32) NOT NULL UNIQUE,
	NAME	    VARCHAR(80),
	EMAIL	    VARCHAR(100),
    AGREE_STATE	BIGINT,              	    -- 동의여부
    SIGN_IN	    DATE,     		-- 가입일
	SIGN_OUT	DATE 			-- 탈퇴일
);


CREATE TABLE MEMBER (
	MEMBER_NO	        BIGINT auto_increment NOT NULL PRIMARY KEY,               -- PK
	MEMBER_NAME 	    VARCHAR(80)	NOT NULL,
	MEMBER_EMAIL	    VARCHAR(100)	NOT NULL UNIQUE,
	MEMBER_ID	        VARCHAR(32)	NOT NULL UNIQUE,
	MEMBER_PW	        VARCHAR(64)	NOT NULL,
	MEMBER_PHONE	    VARCHAR(30),
	MEMBER_BIRTH	    VARCHAR(20),
    MEMBER_GENDER       VARCHAR(20),
    MEMBER_PROMO_ADD    VARCHAR(20),  -- 광고수신여부 
    MEMBER_POST_CODE    VARCHAR(20),  -- 우편번호
    MEMBER_ROAD_ADDR    VARCHAR(300), -- 주소
	AGREE_STATE	        INT,
	SIGN_IN	    		DATE
);

-- 외래키
-- 로그인
-- 로그인기록(FK)&회원
ALTER TABLE MEMBER_LOG ADD CONSTRAINT MEMBER_LOG_MEMBER_FK
    FOREIGN KEY(MEMBER_ID) REFERENCES MEMBER(MEMBER_ID) 
          ON DELETE CASCADE;

-- 트리거
DELIMITER $$
	CREATE TRIGGER SIGN_OUT_TRIGGER
    AFTER DELETE
    ON MEMBER
    FOR EACH ROW
	BEGIN
		INSERT INTO SIGN_OUT_MEMBER
			(MEMBER_NO, ID, NAME, EMAIL, AGREE_STATE, SIGN_IN)
		VALUES
			(OLD.MEMBER_NO, OLD.MEMBER_ID, OLD.MEMBER_NAME, OLD.MEMBER_EMAIL, OLD.AGREE_STATE, OLD.SIGN_IN);
	END $$
DELIMITER ;

-- qna내역room
-- qna(FK)&회원
-- ALTER TABLE QNA ADD CONSTRAINT QNA_MEMBER_FK
--  FOREIGN KEY(MEMBER_NO) REFERENCES MEMBER(MEMBER_NO); 

DROP TABLE NAVER_MEMBER_LOG;
DROP TABLE NAVER_MEMBER;

CREATE TABLE NAVER_MEMBER (
	NAVER_NO BIGINT NOT NULL auto_increment PRIMARY KEY,	
    NAVER_ID  VARCHAR(80),
    NAVER_NAME VARCHAR(50),
    NAVER_EMAIL   VARCHAR(50),
    NAVER_GENDER  VARCHAR(20),
    NAVER_PHONE   VARCHAR(30)  
);

CREATE TABLE NAVER_MEMBER_LOG (
	NAVER_LOG_NO BIGINT NOT NULL auto_increment PRIMARY KEY,
    NAVER_ID  VARCHAR(80),
    NAVER_LOG_DATE DATE
);

ALTER TABLE NAVER_MEMBER_LOG ADD CONSTRAINT NAVER_MEMBER_LOG_NAVER_MEMBER_FK
    FOREIGN KEY(NAVER_ID) REFERENCES NAVER_MEMBER(NAVER_ID) 
          ON DELETE CASCADE;

DROP TABLE RESERVATION;

CREATE TABLE RESERVATION
(
    RESER_NO VARCHAR(15) NOT NULL PRIMARY KEY,
    MEMBER_NO BIGINT NOT NULL,
    ROOM_NO BIGINT NOT NULL,
    RESER_CHECKIN VARCHAR(10),
    RESER_CHECKOUT VARCHAR(10),
    RESER_PEOPLE INT NOT NULL,
    RESER_FOOD INT,
    RESER_STATUS INT NOT NULL,
    RESER_REQUEST VARCHAR(50)
);

-- 예약내역
-- 예약(FK)&회원
ALTER TABLE RESERVATION ADD CONSTRAINT RESERVATION_MEMBER_FK
    FOREIGN KEY(MEMBER_NO) REFERENCES MEMBER(MEMBER_NO); 

DROP TABLE PRICE;

CREATE TABLE PRICE
(
    PRICE_NO VARCHAR(15),
    TOTAL_PRICE INT,
    ROOM_PRICE INT,
    FOOD_PRICE INT,
    TIP_PRICE INT
);

DROP TABLE PAYMENTS;

CREATE TABLE PAYMENTS
(
    RESER_NO VARCHAR(15) NOT NULL,
    IMP_UID VARCHAR(100) NOT NULL,
    RESPONSE VARCHAR(10),
    AMOUNT INT
);

ALTER TABLE PRICE ADD CONSTRAINT PRICE_FK FOREIGN KEY(PRICE_NO) REFERENCES RESERVATION(RESER_NO) ON DELETE CASCADE; 

-- DROP TABLE FAQ;
CREATE TABLE FAQ
(
    FAQ_NO BIGINT NOT NULL auto_increment PRIMARY KEY,
    FAQ_TITLE VARCHAR(100),
    FAQ_CONTENT VARCHAR(500),
    FAQ_CREATED DATE NOT NULL
);

-- DROP TABLE RE_IMAGE;
-- DROP TABLE REVIEW_REPLY;
-- DROP TABLE REVIEW;

CREATE TABLE REVIEW
(
    REVIEW_NO BIGINT NOT NULL auto_increment PRIMARY KEY,
    MEMBER_NO BIGINT NOT NULL,
    RESER_NO  BIGINT NOT NULL,
    REVIEW_TITLE VARCHAR(30) NOT NULL,
    REVIEW_CONTENT VARCHAR(200),
    REVIEW_CREATED DATE,
    REVIEW_REV_NO BIGINT
);

CREATE TABLE REVIEW_REPLY
(
    REPLY_NO BIGINT NOT NULL auto_increment PRIMARY KEY,
    REVIEW_NO BIGINT NOT NULL,
    REPLY_CONTENT VARCHAR(200) NOT NULL,
    REPLY_CREATE DATE
);

CREATE TABLE RE_IMAGE
(
    RE_IMAGE_NO BIGINT NOT NULL auto_increment PRIMARY KEY,
    REVIEW_NO BIGINT NOT NULL,
    RE_IMAGE_PATH VARCHAR(300),
    RE_IMAGE_SAVED VARCHAR(40),
    RE_IMAGE_ORIGIN VARCHAR(300)
);

ALTER TABLE REVIEW_REPLY 
    ADD CONSTRAINT REVIEW_REPLY_REVIEW_FK FOREIGN KEY(REVIEW_NO)
        REFERENCES REVIEW(REVIEW_NO);
        
ALTER TABLE RE_IMAGE
    ADD CONSTRAINT RE_IMAGE_REVIEW_FK FOREIGN KEY(REVIEW_NO)
        REFERENCES REVIEW(REVIEW_NO);
        
-- DROP TABLE ROOM;
-- DROP TABLE ROOM_TYPE;
-- DROP TABLE IMAGE;

CREATE TABLE ROOM_TYPE (
	RT_NO	BIGINT	NOT NULL PRIMARY KEY,
	RT_TYPE	VARCHAR(30)	NOT NULL,
	RT_MAX	BIGINT	NOT NULL
);


CREATE TABLE ROOM (
	ROOM_NO BIGINT	NOT NULL auto_increment PRIMARY KEY,
	RT_NO	BIGINT	NOT NULL,
	ROOM_NAME	VARCHAR(300)	NOT NULL,
	ROOM_STATUS	INT	NOT NULL,
	ROOM_CHECKIN	DATE	NULL,
	ROOM_CHECKOUT	DATE	NULL,
    ROOM_PRICE INT NOT NULL
);



CREATE TABLE IMAGE (
	IMAGE_NO BIGINT	NOT NULL auto_increment PRIMARY KEY,
	ROOM_NO	BIGINT NOT NULL,
	IMAGE_PATH	VARCHAR(300) NOT NULL,
	IMAGE_SAVED	VARCHAR(40) NOT NULL,
	IMAGE_ORIGIN VARCHAR(300) NOT NULL
);

ALTER TABLE RESERVATION ADD CONSTRAINT FK_ROOM_TO_RESERVATION FOREIGN KEY (
	ROOM_NO
)
REFERENCES ROOM (
	ROOM_NO
);


ALTER TABLE ROOM ADD CONSTRAINT FK_ROOM_TYPE_TO_ROOM FOREIGN KEY (
	RT_NO
)
REFERENCES ROOM_TYPE (
	RT_NO
);

ALTER TABLE IMAGE ADD CONSTRAINT FK_ROOM_TO_IMAGE FOREIGN KEY (
	ROOM_NO
)
REFERENCES ROOM (
	ROOM_NO
);

INSERT INTO ROOM_TYPE(RT_NO, RT_TYPE, RT_MAX)
VALUES (1, 'SINGLE', 1);
INSERT INTO ROOM_TYPE(RT_NO, RT_TYPE, RT_MAX)
VALUES (2, 'DOUBLE', 2);
INSERT INTO ROOM_TYPE(RT_NO, RT_TYPE, RT_MAX)
VALUES (3, 'TWIN', 2);

-- DROP TABLE IF EXISTS QNA_REPLY;
-- DROP TABLE IF EXISTS QNA;


CREATE TABLE QNA
(
    QNA_NO BIGINT NOT NULL AUTO_INCREMENT,
    MEMBER_ID VARCHAR(32) NOT NULL,
    QNA_TITLE VARCHAR(100) NOT NULL,
    QNA_CONTENT VARCHAR(1500),
    QNA_HIT INT ,
    QNA_CREATED DATETIME,
    QNA_MODIFIED DATETIME,
    CONSTRAINT QNA_PK PRIMARY KEY(QNA_NO)
);
CREATE TABLE QNA_REPLY
(
    QNA_REPLY_NO BIGINT NOT NULL AUTO_INCREMENT,
    QNA_NO BIGINT NOT NULL,
    MEMBER_ID VARCHAR(32) NOT NULL,
    QNA_REPLY_TITLE VARCHAR(100),
    QNA_REPLY_CONTENT VARCHAR(1500),
    QNA_REPLY_CREATED DATETIME,
    QNA_REPLY_STATE INT,
    QNA_REPLY_DEPTH INT,
    QNA_REPLY_GROUP_NO BIGINT,
    QNA_REPLY_GROUP_ORD INT,
    CONSTRAINT QNA_REPLY_NO_PK PRIMARY KEY(QNA_REPLY_NO)
);
ALTER TABLE QNA_REPLY 
	ADD CONSTRAINT QNA_REPLY_QNA_FK
		FOREIGN KEY(QNA_NO) REFERENCES QNA(QNA_NO)
			ON DELETE CASCADE;


-- REVIEW

DROP TABLE IF EXISTS RE_IMAGE;
DROP TABLE IF EXISTS REVIEW_REPLY;
DROP TABLE IF EXISTS REVIEW;

CREATE TABLE REVIEW
(
    REVIEW_NO BIGINT NOT NULL AUTO_INCREMENT,
    MEMBER_ID VARCHAR(32) NOT NULL,
    RT_TYPE	  VARCHAR(30)		NOT NULL,
    ROOM_NAME	VARCHAR(30)		NOT NULL,
    REVIEW_TITLE VARCHAR(100) NOT NULL,
    REVIEW_CONTENT VARCHAR(1500),
    REVIEW_CREATED DATETIME,
    REVIEW_MODIFIED DATETIME,
    REVIEW_REV_NO INT,
    CONSTRAINT REVIEW_PK PRIMARY KEY(REVIEW_NO)
);
CREATE TABLE REVIEW_REPLY
(
    REPLY_NO BIGINT NOT NULL AUTO_INCREMENT,
    REVIEW_NO BIGINT NOT NULL,
    REPLY_CONTENT VARCHAR(1500) NOT NULL,
    REPLY_CREATED DATETIME,
    REPLY_MODIFIED DATETIME,
	CONSTRAINT REVIEW_REPLY_PK PRIMARY KEY(REPLY_NO)
);

CREATE TABLE RE_IMAGE
(
    RE_IMAGE_NO BIGINT NOT NULL AUTO_INCREMENT,
    REVIEW_NO BIGINT NOT NULL,
    RE_IMAGE_PATH VARCHAR(300),
    RE_IMAGE_SAVED VARCHAR(40),
    RE_IMAGE_ORIGIN VARCHAR(300),
	CONSTRAINT RE_IMAGE PRIMARY KEY(RE_IMAGE_NO)
);

ALTER TABLE REVIEW_REPLY 
    ADD CONSTRAINT REVIEW_REPLY_REVIEW_FK 
		FOREIGN KEY(REVIEW_NO) REFERENCES REVIEW(REVIEW_NO) 
				ON DELETE CASCADE;
        
ALTER TABLE RE_IMAGE
    ADD CONSTRAINT RE_IMAGE_REVIEW_FK 
		FOREIGN KEY(REVIEW_NO) REFERENCES REVIEW(REVIEW_NO)
			ON DELETE CASCADE;


-- FQA
DROP TABLE IF EXISTS FAQ;

CREATE TABLE FAQ
(
    FAQ_NO BIGINT NOT NULL AUTO_INCREMENT,
    FAQ_TITLE VARCHAR(100),
    FAQ_CONTENT VARCHAR(1500),
    FAQ_CREATED DATETIME,
    CONSTRAINT FAQ_PK PRIMARY KEY(FAQ_NO)
);

COMMIT;

